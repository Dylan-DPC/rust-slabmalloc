var searchIndex = {};
searchIndex['slabmalloc'] = {"items":[[0,"","slabmalloc","A slab allocator implementation for small objects\n(< architecture page size).",null,null],[3,"ZoneAllocator","","A zone allocator.",null,null],[3,"SlabAllocator","","A slab allocator allocates elements of a fixed size.",null,null],[3,"SlabPage","","Holds allocated data.",null,null],[8,"SlabPageProvider","","The memory backing as used by the SlabAllocator.",null,null],[10,"allocate_slabpage","","",0,{"inputs":[{"name":"slabpageprovider"}],"output":{"name":"option"}}],[10,"release_slabpage","","",0,{"inputs":[{"name":"slabpageprovider"},{"name":"slabpage"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"zoneallocator"},{"name":"slabpageprovider"}],"output":{"name":"zoneallocator"}}],[11,"allocate","","Allocate a pointer to a block of memory of size `size` with alignment `align`.",1,{"inputs":[{"name":"zoneallocator"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deallocate","","Deallocates a pointer to a block of memory previously allocated by `allocate`.",1,null],[11,"new","","Create a new SlabAllocator.",2,{"inputs":[{"name":"slaballocator"},{"name":"usize"},{"name":"slabpageprovider"}],"output":{"name":"slaballocator"}}],[11,"size","","Return object size of this allocator.",2,{"inputs":[{"name":"slaballocator"}],"output":{"name":"usize"}}],[11,"allocate","","Allocates a block of memory with respect to `alignment`.",2,{"inputs":[{"name":"slaballocator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deallocate","","Deallocates a previously allocated block.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"slabpage"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"SlabPageProvider"],[3,"ZoneAllocator"],[3,"SlabAllocator"],[3,"SlabPage"]]};
searchIndex['x86'] = {"items":[[0,"","x86","",null,null],[11,"fmt","core::num","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"from_small","core::num::flt2dec::bignum","Makes a bignum from one digit.",1,{"inputs":[{"name":"big32x36"},{"name":"u32"}],"output":{"name":"big32x36"}}],[11,"from_u64","","Makes a bignum from `u64` value.",1,{"inputs":[{"name":"big32x36"},{"name":"u64"}],"output":{"name":"big32x36"}}],[11,"is_zero","","Returns true if the bignum is zero.",1,{"inputs":[{"name":"big32x36"}],"output":{"name":"bool"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",1,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"big32x36"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",1,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"big32x36"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",1,{"inputs":[{"name":"big32x36"},{"name":"u32"}],"output":{"name":"big32x36"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",1,{"inputs":[{"name":"big32x36"},{"name":"usize"}],"output":{"name":"big32x36"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",1,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",1,null],[11,"eq","","",1,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"big32x36"},{"name":"big32x36"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"big32x36"}],"output":{"name":"big32x36"}}],[11,"fmt","","",1,{"inputs":[{"name":"big32x36"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::flt2dec::bignum::tests","Makes a bignum from one digit.",2,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",2,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"is_zero","","Returns true if the bignum is zero.",2,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",2,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",2,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",2,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",2,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",2,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",2,null],[11,"eq","","",2,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",2,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",2,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::flt2dec::decoder","",3,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec::strategy::grisu","",5,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"fmt","core::num::flt2dec","",6,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",6,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",6,null],[11,"clone","","",7,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",7,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",7,null],[11,"fmt","","",8,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num","",9,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",10,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",10,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",11,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",14,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",14,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",15,null],[11,"get","","Dereferences the content.",15,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",15,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","core::marker","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"nocopy"}],"output":{"name":"nocopy"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",17,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",17,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",18,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",18,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",19,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",20,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",21,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",22,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",22,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",22,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","x86::std","",23,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",23,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",23,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",23,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",23,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",23,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",23,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",24,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::atomic","",25,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",26,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",27,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",28,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",29,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",25,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",25,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",25,null],[11,"swap","","Stores a value into the bool, returning the old value.",25,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",25,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",25,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",25,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",25,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",25,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",26,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",26,null],[11,"swap","","Stores a value into the isize, returning the old value.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",26,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",27,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",27,null],[11,"swap","","Stores a value into the usize, returning the old value.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",27,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",28,null],[11,"load","","Loads a value from the pointer.",28,null],[11,"store","","Stores a value into the pointer.",28,null],[11,"swap","","Stores a value into the pointer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",28,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",30,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",30,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",30,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",30,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",30,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",30,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",30,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",32,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",32,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",32,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",32,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",32,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",32,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",32,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",32,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",32,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",34,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",36,null],[11,"deref","","",35,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",37,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",37,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",37,null],[11,"clone","core::char","",38,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",39,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",38,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",41,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",40,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",42,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",42,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"indexable","","",42,{"inputs":[{"name":"rev"}],"output":{"name":"usize"}}],[11,"idx","","",42,{"inputs":[{"name":"rev"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",43,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"minmaxresult"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x,y)` is returned where `x <= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",43,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",44,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"indexable","","",44,{"inputs":[{"name":"cloned"}],"output":{"name":"usize"}}],[11,"idx","","",44,{"inputs":[{"name":"cloned"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",45,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"indexable","","",45,{"inputs":[{"name":"cycle"}],"output":{"name":"usize"}}],[11,"idx","","",45,{"inputs":[{"name":"cycle"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",46,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",46,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",46,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",46,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",46,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"next_back","","",46,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"indexable","","",46,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"idx","","",46,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",47,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",47,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"indexable","","",47,{"inputs":[{"name":"zip"}],"output":{"name":"usize"}}],[11,"idx","","",47,{"inputs":[{"name":"zip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",48,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"indexable","","",48,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"idx","","",48,{"inputs":[{"name":"map"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",49,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",50,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",51,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"nth","","",51,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",51,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",51,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"indexable","","",51,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"idx","","",51,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",52,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",52,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",52,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",52,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",52,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",52,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",53,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",54,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",55,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",55,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",55,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",55,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"indexable","","",55,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"idx","","",55,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",56,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",56,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"indexable","","",56,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"idx","","",56,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",57,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"clone","","",58,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",58,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",59,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",59,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",59,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"indexable","","",59,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"idx","","",59,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"reset_fuse","","Resets the `Fuse` such that the next call to `.next()` or\n`.next_back()` will call the underlying iterator again even if it\npreviously returned `None`.",59,null],[11,"clone","","",60,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",60,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"indexable","","",60,{"inputs":[{"name":"inspect"}],"output":{"name":"usize"}}],[11,"idx","","",60,{"inputs":[{"name":"inspect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",61,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",61,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",61,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",20,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",19,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",62,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",63,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next","core::ops","",19,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",64,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",64,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"indexable","","",64,{"inputs":[{"name":"repeat"}],"output":{"name":"usize"}}],[11,"idx","","",64,{"inputs":[{"name":"repeat"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",65,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",65,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",65,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",66,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",66,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",66,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",67,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",67,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",67,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",67,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",67,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",67,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",67,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",67,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",67,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",67,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",67,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",67,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",67,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",67,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",67,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",67,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",67,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",67,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",67,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",67,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",67,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",67,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",67,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",67,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",67,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",68,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",68,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",70,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",67,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",72,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",73,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",74,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",74,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",74,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",74,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",74,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",74,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",74,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",74,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",74,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",74,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",74,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",74,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",74,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",74,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",74,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",74,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",74,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",74,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",74,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",74,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",74,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",75,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",76,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",74,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",78,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",79,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",80,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",81,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",82,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",83,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",84,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",85,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",86,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",87,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",88,null],[11,"next","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"count","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",88,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"indexable","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",88,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",89,null],[11,"next","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"count","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",89,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",90,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",90,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",91,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next","","",93,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",94,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next","","",95,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next","","",96,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"indexable","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"idx","","",97,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"indexable","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"idx","","",98,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",100,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",102,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",106,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",107,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",108,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",109,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",110,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",110,null],[11,"matching","","",110,null],[11,"use_early_reject","","",111,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",111,null],[11,"matching","","",111,null],[11,"eq","core::str","",112,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",112,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",113,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",113,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",113,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",114,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",115,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"clone","","",117,{"inputs":[{"name":"bytesderef"}],"output":{"name":"bytesderef"}}],[11,"call","","",117,null],[11,"call_mut","","",117,null],[11,"call_once","","",117,null],[11,"next","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",118,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",119,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",120,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",119,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",122,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",121,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",122,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",124,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",125,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",126,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",127,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",128,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",127,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",130,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",131,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",130,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",132,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",134,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",134,null],[11,"call_mut","","",134,null],[11,"call_once","","",134,null],[11,"next","","",133,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next_back","","",133,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",136,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",136,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",136,null],[11,"finish","","",136,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",136,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",136,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",137,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",138,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",139,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",140,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",141,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",142,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",143,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",144,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",145,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",145,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",146,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",146,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"finish","","",147,null],[11,"entry","","Adds a new entry to the set output.",148,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",148,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",148,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",149,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",149,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",149,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",150,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",150,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",150,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",151,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",152,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",153,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",154,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",155,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",156,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",157,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",158,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",159,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",159,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",160,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",160,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",160,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",160,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",160,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",160,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",160,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",160,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",160,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",160,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",160,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",17,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",30,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"io","x86","",null,null],[5,"outb","x86::io","Write 8 bits to port",null,{"inputs":[{"name":"u16"},{"name":"u8"}],"output":null}],[5,"inb","","Read 8 bits from port",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"outw","","Write 16 bits to port",null,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":null}],[5,"inw","","Read 16 bits from port",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"outl","","Write 32 bits to port",null,{"inputs":[{"name":"u16"},{"name":"u32"}],"output":null}],[5,"inl","","Read 32 bits from port",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[0,"controlregs","x86","",null,null],[5,"cr0","x86::controlregs","Contains various flags to control operations.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr0_write","","Write cr0.",null,{"inputs":[{"name":"u64"}],"output":null}],[5,"cr2","","Contains page-fault linear address.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr3","","Contains page-table root pointer.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr3_write","","Switch page-table PML4 pointer.",null,{"inputs":[{"name":"u64"}],"output":null}],[5,"cr4","","Contains various flags to control operations in protected mode.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr4_write","","Write cr4.",null,{"inputs":[{"name":"u64"}],"output":null}],[0,"msr","x86","",null,null],[5,"wrmsr","x86::msr","Write 64 bits to msr register.",null,{"inputs":[{"name":"u32"},{"name":"u64"}],"output":null}],[5,"rdmsr","","Read 64 bits msr register.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"IA32_EFER","","Extended Feature Enables",null,null],[17,"IA32_STAR","","System Call Target Address (R/W)",null,null],[17,"IA32_LSTAR","","IA-32e Mode System Call Target Address",null,null],[17,"IA32_FMASK","","System Call Flag Mask (R/W)",null,null],[0,"time","x86","",null,null],[5,"rdtsc","x86::time","Read the time stamp counter.",null,{"inputs":[],"output":{"name":"u64"}}],[0,"irq","x86","",null,null],[3,"InterruptDescription","x86::irq","x86 Exception description (see also Intel Vol. 3a Chapter 6).",null,null],[12,"vector","","",161,null],[12,"mnemonic","","",161,null],[12,"description","","",161,null],[12,"irqtype","","",161,null],[12,"source","","",161,null],[3,"IdtEntry","","A struct describing an interrupt gate.",null,null],[12,"base_lo","","Lower 16 bits of ISR.",162,null],[12,"sel","","Segment selector.",162,null],[12,"res0","","This must always be zero.",162,null],[12,"flags","","Flags.",162,null],[12,"base_hi","","The upper 48 bits of ISR (the last 16 bits must be zero).",162,null],[12,"res1","","Must be zero.",162,null],[3,"PageFaultError","","",null,null],[5,"enable","","Enable Interrupts.",null,{"inputs":[],"output":null}],[5,"disable","","Disable Interrupts.",null,{"inputs":[],"output":null}],[7,"EXCEPTIONS","","x86 External Interrupts (1-16).",null,null],[17,"PFAULT_ERROR_P","","/// 0: The fault was caused by a non-present page.\n/// 1: The fault was caused by a page-level protection violation",null,null],[17,"PFAULT_ERROR_WR","","/// 0: The access causing the fault was a read.\n/// 1: The access causing the fault was a write.",null,null],[17,"PFAULT_ERROR_US","","/// 0: The access causing the fault originated when the processor\n/// was executing in supervisor mode.\n/// 1: The access causing the fault originated when the processor\n/// was executing in user mode.",null,null],[17,"PFAULT_ERROR_RSVD","","/// 0: The fault was not caused by reserved bit violation.\n/// 1: The fault was caused by reserved bits set to 1 in a page directory.",null,null],[17,"PFAULT_ERROR_ID","","/// 0: The fault was not caused by an instruction fetch.\n/// 1: The fault was caused by an instruction fetch.",null,null],[11,"fmt","","",161,{"inputs":[{"name":"interruptdescription"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"interruptdescription"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"idtentry"}],"output":{"name":"idtentry"}}],[11,"fmt","","",162,{"inputs":[{"name":"idtentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"cmp","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"option"}}],[11,"lt","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"le","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"gt","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"ge","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"eq","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",163,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"all","","Returns the set containing all flags.",163,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",163,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"u32"}],"output":{"name":"pagefaulterror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",163,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",163,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"sub","","Returns the set difference of the two sets of flags.",163,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"not","","Returns the complement of this set of flags.",163,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"fmt","","",163,{"inputs":[{"name":"pagefaulterror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rflags","x86","",null,null],[3,"RFlags","x86::rflags","",null,null],[17,"RFLAGS_ID","","/// ID Flag (ID)",null,null],[17,"RFLAGS_VIP","","/// Virtual Interrupt Pending (VIP)",null,null],[17,"RFLAGS_VIF","","/// Virtual Interrupt Flag (VIF)",null,null],[17,"RFLAGS_AC","","/// Alignment Check (AC)",null,null],[17,"RFLAGS_VM","","/// Virtual-8086 Mode (VM)",null,null],[17,"RFLAGS_RF","","/// Resume Flag (RF)",null,null],[17,"RFLAGS_NT","","/// Nested Task (NT)",null,null],[17,"RFLAGS_IOPL0","","/// I/O Privilege Level (IOPL) 0",null,null],[17,"RFLAGS_IOPL1","","/// I/O Privilege Level (IOPL) 1",null,null],[17,"RFLAGS_IOPL2","","/// I/O Privilege Level (IOPL) 2",null,null],[17,"RFLAGS_IOPL3","","/// I/O Privilege Level (IOPL) 3",null,null],[17,"RFLAGS_OF","","/// Overflow Flag (OF)",null,null],[17,"RFLAGS_DF","","/// Direction Flag (DF)",null,null],[17,"RFLAGS_IF","","/// Interrupt Enable Flag (IF)",null,null],[17,"RFLAGS_TF","","/// Trap Flag (TF)",null,null],[17,"RFLAGS_SF","","/// Sign Flag (SF)",null,null],[17,"RFLAGS_ZF","","/// Zero Flag (ZF)",null,null],[17,"RFLAGS_AF","","/// Auxiliary Carry Flag (AF)",null,null],[17,"RFLAGS_PF","","/// Parity Flag (PF)",null,null],[17,"RFLAGS_A1","","/// Bit 1 is always 1.",null,null],[17,"RFLAGS_CF","","/// Carry Flag (CF)",null,null],[11,"hash","","",164,null],[11,"cmp","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"option"}}],[11,"lt","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"le","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"gt","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"ge","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"eq","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",164,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"all","","Returns the set containing all flags.",164,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",164,{"inputs":[{"name":"rflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",164,{"inputs":[{"name":"rflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",164,{"inputs":[{"name":"rflags"},{"name":"u64"}],"output":{"name":"rflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",164,{"inputs":[{"name":"rflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",164,{"inputs":[{"name":"rflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",164,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"not","","Returns the complement of this set of flags.",164,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"new","","Creates a new RFlags entry. Ensures bit 1 is set.",164,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[0,"paging","x86","",null,null],[3,"PML4Entry","x86::paging","",null,null],[3,"PDPTEntry","","",null,null],[3,"PDEntry","","",null,null],[3,"PTEntry","","",null,null],[5,"pml4_index","","Given virtual address calculate corresponding entry in PML4.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[5,"pdpt_index","","Given virtual address calculate corresponding entry in PDPT.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[5,"pd_index","","Given virtual address calculate corresponding entry in PD.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[5,"pt_index","","Given virtual address calculate corresponding entry in PT.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[6,"PAddr","","",null,null],[6,"VAddr","","",null,null],[6,"PML4","","A PML4 table.\nIn practice this has only 4 entries but it still needs to be the size of a 4K page.",null,null],[6,"PDPT","","A page directory pointer table.",null,null],[6,"PD","","A page directory.",null,null],[6,"PT","","A page table.",null,null],[17,"BASE_PAGE_SIZE","","",null,null],[17,"LARGE_PAGE_SIZE","","",null,null],[17,"HUGE_PAGE_SIZE","","",null,null],[17,"CACHE_LINE_SIZE","","",null,null],[17,"MAXPHYADDR","","MAXPHYADDR, which is at most 52; (use CPUID for finding system value).",null,null],[17,"PML4_P","","/// Present; must be 1 to reference a page-directory-pointer table",null,null],[17,"PML4_RW","","/// Read/write; if 0, writes may not be allowed to the 512-GByte region\n/// controlled by this entry (see Section 4.6)",null,null],[17,"PML4_US","","/// User/supervisor; if 0, user-mode accesses are not allowed\n/// to the 512-GByte region controlled by this entry.",null,null],[17,"PML4_PWT","","/// Page-level write-through; indirectly determines the memory type used to\n/// access the page-directory-pointer table referenced by this entry.",null,null],[17,"PML4_PCD","","/// Page-level cache disable; indirectly determines the memory type used to\n/// access the page-directory-pointer table referenced by this entry.",null,null],[17,"PML4_A","","/// Accessed; indicates whether this entry has been used for linear-address translation.",null,null],[17,"PML4_XD","","/// If IA32_EFER.NXE = 1, execute-disable\n/// If 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[17,"PDPT_P","","/// Present; must be 1 to map a 1-GByte page or reference a page directory.",null,null],[17,"PDPT_RW","","/// Read/write; if 0, writes may not be allowed to the 1-GByte region controlled by this entry",null,null],[17,"PDPT_US","","/// User/supervisor; user-mode accesses are not allowed to the 1-GByte region controlled by this entry.",null,null],[17,"PDPT_PWT","","/// Page-level write-through.",null,null],[17,"PDPT_PCD","","/// Page-level cache disable.",null,null],[17,"PDPT_A","","/// Accessed; if PDPT_PS set indicates whether software has accessed the 1-GByte page\n/// else indicates whether this entry has been used for linear-address translation",null,null],[17,"PDPT_D","","/// Dirty; if PDPT_PS indicates whether software has written to the 1-GByte page referenced by this entry.\n/// else ignored.",null,null],[17,"PDPT_PS","","/// Page size; if set this entry maps a 1-GByte page; otherwise, this entry references a page directory.\n/// if not PDPT_PS this is ignored.",null,null],[17,"PDPT_G","","/// Global; if PDPT_PS && CR4.PGE = 1, determines whether the translation is global; ignored otherwise\n/// if not PDPT_PS this is ignored.",null,null],[17,"PDPT_PAT","","/// Indirectly determines the memory type used to access the 1-GByte page referenced by this entry.",null,null],[17,"PDPT_XD","","/// If IA32_EFER.NXE = 1, execute-disable\n/// If 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[17,"PD_P","","/// Present; must be 1 to map a 2-MByte page or reference a page table.",null,null],[17,"PD_RW","","/// Read/write; if 0, writes may not be allowed to the 2-MByte region controlled by this entry",null,null],[17,"PD_US","","/// User/supervisor; user-mode accesses are not allowed to the 2-MByte region controlled by this entry.",null,null],[17,"PD_PWT","","/// Page-level write-through.",null,null],[17,"PD_PCD","","/// Page-level cache disable.",null,null],[17,"PD_A","","/// Accessed; if PD_PS set indicates whether software has accessed the 2-MByte page\n/// else indicates whether this entry has been used for linear-address translation",null,null],[17,"PD_D","","/// Dirty; if PD_PS indicates whether software has written to the 2-MByte page referenced by this entry.\n/// else ignored.",null,null],[17,"PD_PS","","/// Page size; if set this entry maps a 2-MByte page; otherwise, this entry references a page directory.",null,null],[17,"PD_G","","/// Global; if PD_PS && CR4.PGE = 1, determines whether the translation is global; ignored otherwise\n/// if not PD_PS this is ignored.",null,null],[17,"PD_PAT","","/// Indirectly determines the memory type used to access the 2-MByte page referenced by this entry.\n/// if not PD_PS this is ignored.",null,null],[17,"PD_XD","","/// If IA32_EFER.NXE = 1, execute-disable\n/// If 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[17,"PT_P","","/// Present; must be 1 to map a 4-KByte page.",null,null],[17,"PT_RW","","/// Read/write; if 0, writes may not be allowed to the 4-KByte region controlled by this entry",null,null],[17,"PT_US","","/// User/supervisor; user-mode accesses are not allowed to the 4-KByte region controlled by this entry.",null,null],[17,"PT_PWT","","/// Page-level write-through.",null,null],[17,"PT_PCD","","/// Page-level cache disable.",null,null],[17,"PT_A","","/// Accessed; indicates whether software has accessed the 4-KByte page",null,null],[17,"PT_D","","/// Dirty; indicates whether software has written to the 4-KByte page referenced by this entry.",null,null],[17,"PT_G","","/// Global; if CR4.PGE = 1, determines whether the translation is global (see Section 4.10); ignored otherwise",null,null],[17,"PT_XD","","/// If IA32_EFER.NXE = 1, execute-disable\n/// If 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[11,"hash","","",165,null],[11,"cmp","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"option"}}],[11,"lt","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"le","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"gt","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"ge","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"eq","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"all","","Returns the set containing all flags.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",165,{"inputs":[{"name":"pml4entry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",165,{"inputs":[{"name":"pml4entry"},{"name":"u64"}],"output":{"name":"pml4entry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",165,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"not","","Returns the complement of this set of flags.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"new","","Creates a new PML4Entry.",165,{"inputs":[{"name":"pml4entry"},{"name":"paddr"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"get_address","","Retrieves the physical address in this entry.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",165,{"inputs":[{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"pml4entry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"cmp","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"option"}}],[11,"lt","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"le","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"gt","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"ge","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"eq","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"all","","Returns the set containing all flags.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",166,{"inputs":[{"name":"pdptentry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",166,{"inputs":[{"name":"pdptentry"},{"name":"u64"}],"output":{"name":"pdptentry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",166,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"not","","Returns the complement of this set of flags.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"new","","Creates a new PDPTEntry.",166,{"inputs":[{"name":"pdptentry"},{"name":"paddr"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"get_address","","Retrieves the physical address in this entry.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",166,{"inputs":[{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"fmt","","",166,{"inputs":[{"name":"pdptentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",167,null],[11,"cmp","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"option"}}],[11,"lt","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"le","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"gt","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"ge","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"eq","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"all","","Returns the set containing all flags.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",167,{"inputs":[{"name":"pdentry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",167,{"inputs":[{"name":"pdentry"},{"name":"u64"}],"output":{"name":"pdentry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",167,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"not","","Returns the complement of this set of flags.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"new","","Creates a new PDEntry.",167,{"inputs":[{"name":"pdentry"},{"name":"paddr"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"get_address","","Retrieves the physical address in this entry.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",167,{"inputs":[{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"pdentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",168,null],[11,"cmp","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"option"}}],[11,"lt","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"le","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"gt","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"ge","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"eq","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"all","","Returns the set containing all flags.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",168,{"inputs":[{"name":"ptentry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",168,{"inputs":[{"name":"ptentry"},{"name":"u64"}],"output":{"name":"ptentry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",168,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"not","","Returns the complement of this set of flags.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"new","","Creates a new PTEntry.",168,{"inputs":[{"name":"ptentry"},{"name":"paddr"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"get_address","","Retrieves the physical address in this entry.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",168,{"inputs":[{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"fmt","","",168,{"inputs":[{"name":"ptentry"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"segmentation","x86","",null,null],[3,"SegmentSelector","x86::segmentation","",null,null],[3,"SegmentDescriptor","","",null,null],[5,"load_ss","","Reload stack segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_ds","","Reload data segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_es","","Reload fs segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_fs","","Reload fs segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_gs","","Reload gs segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_cs","","Reload code segment register.\nNote this is special since we can not directly move\nto %cs. Instead we push the new segment selector\nand return value on the stack and use lretq\nto reload cs and continue at 1:.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[17,"RPL_0","","/// Requestor Privilege Level",null,null],[17,"RPL_1","","",null,null],[17,"RPL_2","","",null,null],[17,"RPL_3","","",null,null],[17,"TI_GDT","","/// Table Indicator (TI) 0 means GDT is used.",null,null],[17,"TI_LDT","","/// Table Indicator (TI) 1 means LDT is used.",null,null],[17,"DESC_S","","/// Descriptor type (0 = system; 1 = code or data).",null,null],[17,"DESC_DPL0","","/// Descriptor privilege level 0.",null,null],[17,"DESC_DPL1","","/// Descriptor privilege level 1.",null,null],[17,"DESC_DPL2","","/// Descriptor privilege level 2.",null,null],[17,"DESC_DPL3","","/// Descriptor privilege level 3.",null,null],[17,"DESC_P","","/// Descriptor is Present.",null,null],[17,"DESC_AVL","","/// Available for use by system software.",null,null],[17,"DESC_L","","/// 64-bit code segment (IA-32e mode only).",null,null],[17,"DESC_DB","","/// Default operation size (0 = 16-bit segment, 1 = 32-bit segment)",null,null],[17,"DESC_G","","///  Granularity.",null,null],[17,"TYPE_SYS_LDT","","",null,null],[17,"TYPE_SYS_TSS_AVAILABLE","","",null,null],[17,"TYPE_SYS_TSS_BUSY","","",null,null],[17,"TYPE_SYS_CALL_GATE","","",null,null],[17,"TYPE_SYS_INTERRUPT_GATE","","",null,null],[17,"TYPE_SYS_TRAP_GATE","","",null,null],[17,"TYPE_D_RO","","/// Data Read-Only",null,null],[17,"TYPE_D_ROA","","/// Data Read-Only, accessed",null,null],[17,"TYPE_D_RW","","/// Data Read/Write",null,null],[17,"TYPE_D_RWA","","/// Data Read/Write, accessed",null,null],[17,"TYPE_D_ROEXD","","/// Data Read-Only, expand-down",null,null],[17,"TYPE_D_ROEXDA","","/// Data Read-Only, expand-down, accessed",null,null],[17,"TYPE_D_RWEXD","","/// Data Read/Write, expand-down",null,null],[17,"TYPE_D_RWEXDA","","/// Data Read/Write, expand-down, accessed",null,null],[17,"TYPE_C_EO","","/// Code Execute-Only",null,null],[17,"TYPE_C_EOA","","/// Code Execute-Only, accessed",null,null],[17,"TYPE_C_ER","","/// Code Execute/Read",null,null],[17,"TYPE_C_ERA","","/// Code Execute/Read, accessed",null,null],[17,"TYPE_C_EOC","","/// Code Execute-Only, conforming",null,null],[17,"TYPE_C_EOCA","","/// Code Execute-Only, conforming, accessed",null,null],[17,"TYPE_C_ERC","","/// Code Execute/Read, conforming",null,null],[17,"TYPE_C_ERCA","","/// Code Execute/Read, conforming, accessed",null,null],[11,"hash","","",169,null],[11,"cmp","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"option"}}],[11,"lt","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"le","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"gt","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"ge","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"eq","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",169,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"all","","Returns the set containing all flags.",169,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"bits","","Returns the raw value of the flags currently stored.",169,{"inputs":[{"name":"segmentselector"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",169,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",169,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"segmentselector"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",169,{"inputs":[{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",169,{"inputs":[{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"sub","","Returns the set difference of the two sets of flags.",169,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"not","","Returns the complement of this set of flags.",169,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"new","","Create a new SegmentSelector",169,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"segmentselector"}}],[11,"from_raw","","",169,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"segmentselector"}}],[11,"fmt","","",169,{"inputs":[{"name":"segmentselector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",170,null],[11,"cmp","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"option"}}],[11,"lt","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"le","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"gt","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"ge","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"eq","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",170,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"all","","Returns the set containing all flags.",170,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"bits","","Returns the raw value of the flags currently stored.",170,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"u64"}],"output":{"name":"segmentdescriptor"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",170,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",170,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"sub","","Returns the set difference of the two sets of flags.",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"not","","Returns the complement of this set of flags.",170,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"new","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"u32"},{"name":"u32"}],"output":{"name":"segmentdescriptor"}}],[11,"fmt","","",170,{"inputs":[{"name":"segmentdescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"task","x86","",null,null],[3,"TaskStateSegment","x86::task","In 64-bit mode the TSS holds information that is not\ndirectly related to the task-switch mechanism,\nbut is used for finding kernel level stack\nif interrupts arrive while in kernel mode.",null,null],[12,"reserved","","",171,null],[12,"rsp","","The full 64-bit canonical forms of the stack pointers (RSP) for privilege levels 0-2.",171,null],[12,"reserved2","","",171,null],[12,"ist","","The full 64-bit canonical forms of the interrupt stack table (IST) pointers.",171,null],[12,"reserved3","","",171,null],[12,"reserved4","","",171,null],[12,"iomap_base","","The 16-bit offset to the I/O permission bit map from the 64-bit TSS base.",171,null],[5,"load_ltr","","Load the task state register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[6,"TaskStateDescriptorLow","","",null,null],[6,"TaskStateDescriptorHigh","","",null,null],[11,"fmt","","",171,{"inputs":[{"name":"taskstatesegment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",171,{"inputs":[{"name":"taskstatesegment"}],"output":{"name":"taskstatesegment"}}],[0,"dtables","x86","",null,null],[3,"DescriptorTablePointer","x86::dtables","Functions and data-structures to load descriptor tables.\nA struct describing a pointer to a descriptor table (GDT / IDT).\nThis is in a format suitable for giving to 'lgdt' or 'lidt'.",null,null],[12,"limit","","Size of the DT.",172,null],[12,"base","","Pointer to the memory region containing the DT.",172,null],[5,"lgdt","","Load GDT table.",null,{"inputs":[{"name":"descriptortablepointer"}],"output":null}],[5,"lldt","","Load LDT table.",null,{"inputs":[{"name":"descriptortablepointer"}],"output":null}],[5,"lidt","","Load IDT table.",null,{"inputs":[{"name":"descriptortablepointer"}],"output":null}],[11,"fmt","","",172,{"inputs":[{"name":"descriptortablepointer"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"syscall","x86","",null,null],[5,"syscall0","x86::syscall","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall1","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall2","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall3","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall4","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall5","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall6","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[0,"cpuid","x86","",null,null],[3,"CpuId","x86::cpuid","",null,null],[3,"CpuIdResult","","",null,null],[12,"eax","","",173,null],[12,"ebx","","",173,null],[12,"ecx","","",173,null],[12,"edx","","",173,null],[5,"cpuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"cpuidresult"}}],[11,"fmt","","",174,{"inputs":[{"name":"cpuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"cpuidresult"}],"output":{"name":"cpuidresult"}}],[11,"fmt","","",173,{"inputs":[{"name":"cpuidresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",174,{"inputs":[{"name":"cpuid"}],"output":{"name":"cpuid"}}],[11,"get","","",174,{"inputs":[{"name":"cpuid"},{"name":"usize"}],"output":{"name":"cpuidresult"}}],[14,"int!","x86","Generate a software interrupt.\nThis is a macro argument needs to be an immediate.",null,null],[14,"syscall!","","SYSCALL invokes an OS system-call handler at privilege level 0.\nIt does so by loading RIP from the IA32_LSTAR\nMSR (after saving the address of the instruction following SYSCALL into RCX).\n\"A.2 AMD64 Linux Kernel Conventions\" of System V Application Binary Interface AMD64 Architecture Processor Supplement:\nA) The kernel interface uses %rdi, %rsi, %rdx, %r10, %r8 and %r9.\nB) A system-call is done via the syscall instruction. The kernel destroys registers %rcx and %r11.\nC) The number of the syscall has to be passed in register %rax.\nD) System-calls are limited to six arguments, no argument is passed directly on the stack.\nE) Returning from the syscall, register %rax contains the result of the system-call. A value in the range between -4095 and -1 indicates an error, it is -errno.\nF) Only values of class INTEGER or class MEMORY are passed to the kernel.\nThis code is inspired by the syscall.rs (https://github.com/kmcallister/syscall.rs/) project.",null,null]],"paths":[[3,"Wrapping"],[3,"Big32x36"],[3,"Big8x3"],[3,"Decoded"],[4,"FullDecoded"],[3,"Fp"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"InterruptDescription"],[3,"IdtEntry"],[3,"PageFaultError"],[3,"RFlags"],[3,"PML4Entry"],[3,"PDPTEntry"],[3,"PDEntry"],[3,"PTEntry"],[3,"SegmentSelector"],[3,"SegmentDescriptor"],[3,"TaskStateSegment"],[3,"DescriptorTablePointer"],[3,"CpuIdResult"],[3,"CpuId"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
